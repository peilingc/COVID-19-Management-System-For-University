/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.StudentRole;

import Busines.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Hospital.Doctor;
import Business.Hospital.Patient;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.University.Student;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.RegisterWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jiaqi Wang
 * @author PeiLingChiang
 */

//Patient is exactly student
//This panel is used by students to register as a patient

public class PatientWorkAreaJPanel extends javax.swing.JPanel {
    
    private JPanel upc;
    private UserAccount account;
    private EcoSystem system;
    private Student student;
    private Doctor doctor;
    
    /**
     * Creates new form PatientWorkAreaJPanel
     */
    public PatientWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem system, Student s) {
        initComponents();
        this.upc = userProcessContainer;
        this.account = account;
        this.system = system;  
        this.student = s;
        populateComboBox();
        populateRequestTable();
    }
    
    private void populateComboBox(){
        doctorCombobox.removeAllItems();
        
        List<String> wholeList = new ArrayList<String>();
        List<String> distinctList = new ArrayList<String>();
        
        //store all departments from doctors in wholeList
        for (Doctor d : system.getDoctorDir().getDoctorList()) {
            String departname = d.getDepartment();
            wholeList.add(departname);
        }
        
        //remove duplicate departments and store in distinctList
        for(int i=0;i<wholeList.size();i++){
            if(!distinctList.contains(wholeList.get(i))){
                distinctList.add(wholeList.get(i));
            }
        }
        
        for(String name : distinctList){
            doctorCombobox.addItem(name);
        }
    }
    
    private void populateTable(String department){
        DefaultTableModel model = (DefaultTableModel)doctorJTable.getModel();
        
        //Remove rows one by one from the end of the table
        int rowCount = model.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
       
        for(Doctor d : system.getDoctorDir().getDoctorList()) {
            System.out.println("d, dep: "+d);
            if(d.getDepartment().equalsIgnoreCase(department)){
                Object row[] = new Object[4];
                row[0] = d;
                row[1] = d.getId();
                row[2] = d.getDepartment();
                row[3] = d.getJobTitle();
                model.addRow(row);
            }
        }
    }
    
    private void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel)tblRequest.getModel();
        model.setRowCount(0);
        for (WorkRequest request : account.getWorkQueue().getWorkRequestList()){
            if (request instanceof RegisterWorkRequest){
                Object[] row = new Object[5];
                row[0] = request;
                row[1] = ((RegisterWorkRequest) request).getDoctor();
                row[2] = request.getMessage();
                row[3] = request.getStatus();
                row[4] = request.getResolveDate();
                model.addRow(row);
            }
        }
        tblRequest.getColumnModel().getColumn(0).setPreferredWidth(200);
        tblRequest.getColumnModel().getColumn(4).setPreferredWidth(200);
        tblRequest.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        doctorJTable = new javax.swing.JTable();
        doctorCombobox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        btnRegister = new javax.swing.JButton();
        lbltitle = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaSymptoms = new javax.swing.JTextArea();
        btnSubmit = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblRequest = new javax.swing.JTable();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        doctorJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Doctor's Name", "Department", "Job Title"
            }
        ));
        jScrollPane1.setViewportView(doctorJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 170, 350, 97));

        doctorCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        doctorCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorComboboxActionPerformed(evt);
            }
        });
        add(doctorCombobox, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 130, 110, -1));

        jLabel2.setText("Find Your Doctor By Department:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 130, 250, -1));

        btnRegister.setText("Register Now");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });
        add(btnRegister, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 280, -1, -1));

        lbltitle.setText("Please briefly describe your symptoms:");
        lbltitle.setEnabled(false);
        add(lbltitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 130, 304, -1));

        jScrollPane2.setEnabled(false);

        txaSymptoms.setColumns(20);
        txaSymptoms.setRows(5);
        jScrollPane2.setViewportView(txaSymptoms);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 160, 304, 100));

        btnSubmit.setText("Submit");
        btnSubmit.setEnabled(false);
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });
        add(btnSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 280, -1, -1));

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 490, -1, -1));

        tblRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request Date", "Doctor", "Symptoms", "Status", "Resolved Date"
            }
        ));
        jScrollPane3.setViewportView(tblRequest);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 370, 720, 140));
    }// </editor-fold>//GEN-END:initComponents

    private void doctorComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorComboboxActionPerformed
        // TODO add your handling code here:
        String s = (String) doctorCombobox.getSelectedItem();
        if (s!=null){
            populateTable(s);
        }
    }//GEN-LAST:event_doctorComboboxActionPerformed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        // TODO add your handling code here:
        int row = doctorJTable.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Please select a doctor!!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        doctor = (Doctor)doctorJTable.getValueAt(row, 0);
        
        lbltitle.setEnabled(true);
        txaSymptoms.setEnabled(true);
        btnSubmit.setEnabled(true);
    }//GEN-LAST:event_btnRegisterActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        if (txaSymptoms.getText().length()==0){
            JOptionPane.showMessageDialog(null, "Please describe your symptoms!!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //create patient and store under specific doctor
        Patient patient = doctor.getPatientDirentory().addPatient(student);
        patient.setSymptoms(txaSymptoms.getText());
        student.setRegisteringStatus("registering");
        
        //store patient in system to quickly get
        system.getPatientDir().getPatientList().add(patient);
        
        //create a register request
        RegisterWorkRequest wr = new RegisterWorkRequest();
        wr.setSender(account);
        wr.setStatus("registering");
        wr.setMessage(txaSymptoms.getText());
        wr.setDoctor(doctor);
        wr.setPatient(patient);
        
        Organization org = null;
            for(Network network : system.getNetworkList()){
                for(Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()){
                    if (e instanceof HospitalEnterprise){
                        for (Organization o : e.getOrganizationDirectory().getOrganizationList()){
                            if (o instanceof DoctorOrganization){
                                org = o;
                                break;
                            }
                        }
                        if (org!=null){
                            org.getWorkQueue().getWorkRequestList().add(wr);
                            account.getWorkQueue().getWorkRequestList().add(wr);
                        }
                    }
                }
            }
        
        lbltitle.setEnabled(false);
        txaSymptoms.setEnabled(false);
        btnSubmit.setEnabled(false);
        populateRequestTable();
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        upc.remove(this);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.previous(upc);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton btnRegister;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox<String> doctorCombobox;
    private javax.swing.JTable doctorJTable;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbltitle;
    private javax.swing.JTable tblRequest;
    private javax.swing.JTextArea txaSymptoms;
    // End of variables declaration//GEN-END:variables


}
